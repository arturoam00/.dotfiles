#!/bin/bash

# Load passphrase
export BORG_PASSCOMMAND="cat $XDG_CONFIG_HOME/borg/.secrets"
[ -f "$SECRETS_FILE" ] && . "$SECRETS_FILE"

# some helpers and error handling:
info() { printf "\n%s %s\n\n" "$( date )" "$*" >&2; }
trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

info "Starting backup"

# Backup the most important directories into an archive named after
# the machine this script is currently running on:

borg create                                      \
    --remote-path borg12                         \
    --checkpoint-interval 600                    \
    --verbose                                    \
    --filter AME                                 \
    --list                                       \
    --stats                                      \
    --show-rc                                    \
    --compression lz4                            \
    --exclude-caches                             \
    -x                                           \
    --numeric-ids                                \
    --patterns-from ~/.config/borg/patterns.txt  \
    ::'{hostname}-{now}'                         \
    ~

backup_exit=$?

info "Pruning repository"

# Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly
# archives of THIS machine. The '{hostname}-*' matching is very important to
# limit prune's operation to this machine's archives and not apply to
# other machines' archives also:

borg prune                          \
    --remote-path borg12            \
    --list                          \
    --glob-archives '{hostname}-*'  \
    --show-rc                       \
    --keep-daily    7               \
    --keep-weekly   4               \
    --keep-monthly  6

prune_exit=$?

# actually free repo disk space by compacting segments

info "Compacting repository"

borg compact --remote-path borg12

compact_exit=$?

# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))
global_exit=$(( compact_exit > global_exit ? compact_exit : global_exit ))

if [ ${global_exit} -eq 0 ]; then
    info "Backup, Prune, and Compact finished successfully"
    notify-send "✅ Backup to $BORG_REPO finished successfully"
elif [ ${global_exit} -eq 1 ]; then
    info "Backup, Prune, and/or Compact finished with warnings"
    notify-send "⚠️ Backup to $BORG_REPO finished with warnings"
else
    info "Backup, Prune, and/or Compact finished with errors"
    notify-send "❌ Backup to $BORG_REPO failed – check logs"
fi

exit ${global_exit}
